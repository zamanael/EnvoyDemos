<?xml version="1.0"?>
<configuration>
  <configSections>
    <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
      <section name="CardAccess.CustomerService.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false"/>
    </sectionGroup>
  </configSections>
  <userSettings>
    <CardAccess.CustomerService.Properties.Settings>
      <setting name="SqlInstallArg" serializeAs="String">
        <value>/QS /ACTION=Install /IAcceptSQLServerLicenseTerms /FEATURES=SQLENGINE,REPLICATION /INSTANCENAME=MSSQLSERVER /TCPENABLED=1 /NPENABLED=1 /SECURITYMODE=SQL /SAPWD="Cic!2345678901"  /sqlsvcaccount= "NT AUTHORITY\SYSTEM" /SQLSYSADMINACCOUNTS="BUILTIN\ADMINISTRATORS" /AGTSVCACCOUNT="NT AUTHORITY\Network Service" /ASSVCACCOUNT= "NT AUTHORITY\Network Service" /ISSVCACCOUNT="NT AUTHORITY\NETWORK SERVICE" /RSSVCACCOUNT= "NT AUTHORITY\NETWORK SERVICE" /ASSYSADMINACCOUNTS="NT AUTHORITY\Network Service"  /BROWSERSVCSTARTUPTYPE="Automatic" /skiprules=RebootRequiredCheck</value>
      </setting>
      <setting name="SqlPartitionMerge" serializeAs="String">
        <value>
          SELECT NEWID() AS [PartitionID], [PartitionName], 0 [DeviceType], MAX([LastUpdated]) AS [LastUpdated] INTO [#DISTINCT_PARTITIONS]
          FROM [dbo].[Partition]
          WHERE [DeviceType] &gt; 0
          GROUP BY [PartitionName]
          ORDER BY PartitionName,[DeviceType]

          ---------------CURSOR Start--------------------
          DECLARE CUR_DISTINCT_PARTITIONS CURSOR LOCAL
          FOR  SELECT [PartitionID], [PartitionName] FROM [#DISTINCT_PARTITIONS] ORDER BY PartitionName

          OPEN CUR_DISTINCT_PARTITIONS
          BEGIN
          declare @V_PartitionID  AS UNIQUEIDENTIFIER
          declare @V_PartitionName  AS VARCHAR(100)
          FETCH NEXT FROM CUR_DISTINCT_PARTITIONS INTO @V_PartitionID, @V_PartitionName
          WHILE @@FETCH_STATUS = 0
          BEGIN
          --------------------------INSERT INTO [OperatorPartitions] TABLE------------------------------
          INSERT INTO [OperatorPartitions]
          SELECT DISTINCT @V_PartitionID AS PartitionID, OP.OperatorID, 1 AS IsPrimaryPartition, GETDATE() FROM [Partition] AS P INNER JOIN OperatorPartitions AS OP ON P.PartitionID = OP.PartitionID
          WHERE PartitionName = @V_PartitionName

          --------------------------INSERT INTO [RolePartitions] TABLE------------------------------
          INSERT INTO [RolePartitions]
          SELECT DISTINCT @V_PartitionID AS PartitionID, RoleID, GETDATE() AS LastUpdated FROM [Partition] AS P INNER JOIN [RolePartitions] AS RP ON P.PartitionID = RP.PartitionID
          WHERE PartitionName = @V_PartitionName

          --------------------------INSERT INTO [DevicePartitions] TABLE------------------------------
          INSERT INTO [DevicePartitions]
          SELECT DISTINCT @V_PartitionID AS PartitionID, caObjectID FROM [Partition] AS P INNER JOIN [DevicePartitions] AS DP ON P.PartitionID = DP.PartitionID
          WHERE PartitionName = @V_PartitionName

          FETCH NEXT FROM CUR_DISTINCT_PARTITIONS INTO @V_PartitionID, @V_PartitionName
          END
          END
          CLOSE CUR_DISTINCT_PARTITIONS
          DEALLOCATE CUR_DISTINCT_PARTITIONS
          ---------------END CURSOR Start--------------------

          -------------Inserting partition which not belongs to Admin Operators-----------
          INSERT INTO [DevicePartitions]
          SELECT '3DC78C7B-C9CE-4485-A835-63D577F623E6' AS PartitionID, P.PartitionID
          FROM [Partition] AS P
          WHERE NOT EXISTS(SELECT 1 FROM [DevicePartitions] AS DP WHERE P.PartitionID = DP.caObjectID AND DP.PartitionID = '3DC78C7B-C9CE-4485-A835-63D577F623E6')
          ORDER BY PartitionName

          -------------Delete partitions which are device type not All Devices-----------
          DELETE  FROM [dbo].[Partition] WHERE [DeviceType] &gt; 0

          -------------Delete partitions which are device type not All Devices-----------
          INSERT INTO [dbo].[Partition]
          SELECT * FROM [#DISTINCT_PARTITIONS]

          DROP TABLE [#DISTINCT_PARTITIONS]

          ---Delete unwanted devices from device partitions if partition was deleted by user, have seen in customer databases --------
          DELETE FROM DevicePartitions WHERE [PartitionID] not in  (select [PartitionID] from [Partition])
        </value>
      </setting>
      <setting name="SqlMissingScript" serializeAs="String">
        <value>
          IF NOT EXISTS ( select '3dc78c7b-c9ce-4485-a835-63d577f623e6', caObjectId from dbo.alarmLink_scripts )
          INSERT INTO dbo.DevicePartitions select '3dc78c7b-c9ce-4485-a835-63d577f623e6', caObjectId from dbo.alarmLink_scripts
          IF NOT EXISTS ( select '3dc78c7b-c9ce-4485-a835-63d577f623e6', caObjectId from dbo.alarmLink_ScriptLinks )
          INSERT INTO dbo.DevicePartitions select '3dc78c7b-c9ce-4485-a835-63d577f623e6', caObjectId from dbo.alarmLink_ScriptLinks
          IF NOT EXISTS ( select '3dc78c7b-c9ce-4485-a835-63d577f623e6', caObjectId from dbo.AlarmLink_Schedule )
          INSERT INTO dbo.DevicePartitions select '3dc78c7b-c9ce-4485-a835-63d577f623e6', caObjectId from dbo.AlarmLink_Schedule

        </value>
      </setting>
      <setting name="SqlDupUserFields" serializeAs="String">
        <value>
          DECLARE [DuplicateUserField] CURSOR LOCAL
          FOR
          SELECT Uf.UserFieldID, Uf.UserFieldName FROM UserFieldDef AS Uf
          INNER JOIN (SELECT Ufd.UserFieldName, COUNT(*) AS dupCount
          FROM UserFieldDef AS Ufd
          GROUP BY UserFieldName
          HAVING COUNT(*)&gt;1
          ) Ufd ON Uf.UserFieldName=Ufd.UserFieldName
          ORDER BY UserFieldTabId
          OPEN [DuplicateUserField]
          BEGIN TRY
          DECLARE @UserFieldID INT, @UserFieldName NVARCHAR(50), @Inc INT
          DECLARE  @msg nvarchar(max)
          DECLARE @str nvarchar(60), @lastUp nvarchar(50)
          FETCH NEXT FROM [DuplicateUserField] INTO @UserFieldID, @UserFieldName;
          SET @Inc=0
          SET @lastUp=''
          WHILE @@FETCH_STATUS = 0
          BEGIN
          if(@lastUp&lt;&gt;@UserFieldName)
          SET @Inc=0

          IF @Inc = 0
          SET @str=@UserFieldName
          else
          SET @str=@UserFieldName+ CONVERT(VARCHAR(10),@Inc)

          SET @lastUp=@UserFieldName
          UPDATE UserFieldDef SET UserFieldName=@str WHERE UserFieldID=@UserFieldID
          FETCH NEXT FROM [DuplicateUserField] INTO @UserFieldID, @UserFieldName;
          SET @Inc=@Inc+1
          END
          END TRY
          BEGIN CATCH
          set @msg=(SELECT ERROR_MESSAGE())
          END CATCH
          CLOSE [DuplicateUserField]
          DEALLOCATE [DuplicateUserField]
        </value>
      </setting>
      <setting name="SqlRepeaterShowup" serializeAs="String">
        <value> update RepeaterStatus set Cluster = Cluster+1 where Cluster = 0</value>
      </setting>
      <setting name="SqlNumericUserFields" serializeAs="String">
        <value>
          UPDATE UserFieldDef SET UserFieldName= 'Field' + cast(UserFieldName as nvarchar)
          WHERE UserFieldID IN(SELECT UserFieldID from UserFieldDef WHERE ISNUMERIC(UserFieldName)&gt;0)
        </value>
      </setting>
      <setting name="SqlEventsReport" serializeAs="String">
        <value>
          DECLARE @Query NVARCHAR(MAX)
          SET @Query = '';
          SET @Query = 'UPDATE [@LiveEventDatabase].[dbo].[Event] SET caObjectID=(CASE WHEN [Cat] IN (0,5) THEN (SELECT TOP 1 caObjectID FROM Reader WHERE Reader.PnlRef = [PnlNo] AND Reader.RdrNo = [DeviceNo])
          WHEN [Cat] = 1 THEN (SELECT TOP 1 caObjectID FROM Input WHERE Input.PnlRef = [PnlNo] AND Input.InpNo = [DeviceNo])
          WHEN [Cat] = 2 THEN (SELECT TOP 1 caObjectID FROM Relay WHERE Relay.PnlRef = [PnlNo] AND Relay.RelNo = [DeviceNo])
          WHEN [Cat] = 3 THEN (SELECT TOP 1 caObjectID FROM Link WHERE Link.PnlRef = [PnlNo] AND Link.ProgNo = [DeviceNo])
          WHEN [Cat] IN (4,7) THEN (SELECT TOP 1 caObjectID FROM Panel WHERE Panel.PnlNo=[PnlNo])
          WHEN [Cat] = 10 THEN (SELECT TOP 1 caObjectID FROM MActiveLinks WHERE MActiveLinks.PnlRef = [PnlNo] AND MActiveLinks.ProgNo = [DeviceNo])
          ELSE ''00000000-0000-0000-0000-000000000000'' END)'
          EXEC (@Query); SET @Query = ''
        </value>
      </setting>
      <setting name="SqlFixBadgeTable" serializeAs="String">
        <value>
          --1. Replace LastName=LN and Firstname=FN if LastName or Firstname is empty or null
          UPDATE [dbo].[Person] SET LastName='LN' where LastName IS NULL OR LastName =''
          UPDATE [dbo].[Person] SET FrstName='FN' where FrstName IS NULL OR FrstName =''

          --2. Delete Person if there are no Badge records.
          DELETE FROM dbo.Person WHERE NOT EXISTS(SELECT PersonID FROM Badge WHERE Badge.PersonID=Person.PersonID)

          --3. Delete BadgeAccess data if there is no Badge record.
          DELETE FROM dbo.BadgeAccess WHERE NOT EXISTS(SELECT Badge FROM dbo.Badge WHERE Badge.Badge=BadgeAccess.Badge and Badge.Facility=BadgeAccess.Facility)

          --4. Delete BadgeCategories data if there is no Badge record.
          DELETE FROM dbo.BadgeCategories WHERE NOT EXISTS(SELECT Badge FROM dbo.Badge WHERE Badge.Badge=BadgeCategories.Badge and Badge.Facility=BadgeCategories.Facility)
        </value>
      </setting>
      <setting name="SqlAlterTables" serializeAs="String">
        <value>ALTER TABLE GlobalVariables ALTER COLUMN variableValue NVARCHAR(MAX)</value>
      </setting>
      <setting name="SqlAlterEventTables" serializeAs="String">
        <value>
          IF NOT EXISTS(SELECT * FROM sys.indexes WHERE Name = 'Ix_EDate_Pending')
          BEGIN
          CREATE NONCLUSTERED INDEX [Ix_EDate_Pending] ON [dbo].[Event]
          (
          [EDate] ASC,
          [Seqno] ASC
          )
          INCLUDE ([Facno],
          [Badge], [caObjectID],	[Priority],	[Cat],	[PnlNo], [DeviceNo], [Status],	[Class],	[Description],
          [Name],	[HasPhoto],	[HasVideo],	[Arch],	[AckTStamp], [Tag], [UTCOffset], [RespReq],	[AckOpr],
          [Pending]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
          END
        </value>
      </setting>
      <setting name="sqlca_sp_VHistChunkResultSet" serializeAs="String">
        <value>
          ALTER PROCEDURE [dbo].[ca_sp_VHistChunkResultSet](
          @PageSize int,
          @CurrentPage int,
          @OrderBy varchar(1000),
          @FinalOrderBy varchar(1000),
          @Select varchar(1000),
          @FinalSelect varchar(1000),
          @Where varchar(1000),
          @Table varchar(3000),
          @ObjectID varchar(30),
          @OperatorID UniqueIdentifier,
          @EventDBServer varchar(3000),
          @EventDB varchar(3000),
          @ConfigDb varchar(3000),
          @Partitioned bit
          )
          WITH EXECUTE AS CALLER
          AS
          BEGIN
          SET NOCOUNT ON;
          DECLARE	  @sql nVarChar(MAX)
          , @sqlFinal nVarChar(MAX)
          , @sqlSelect nVarChar(4000)
          , @sqlStmt nVarChar(1000)
          , @vWhere nVarChar(1000)
          , @vTable nVarChar(1000)
          , @Partitionstr varchar(3000)

          IF @Where &lt;&gt; ''
          BEGIN
          IF @Partitioned = 1
          BEGIN
          SET @vWhere = ' AND ' + @Where;
          END
          ELSE
          BEGIN
          SET @vWhere = ' WHERE ' + @Where;
          END
          END
          ELSE
          BEGIN
          SET @vWhere = '';
          END

          IF @Partitioned = 1
          BEGIN
          SET @Partitionstr=' WHERE (EXISTS (SELECT 1 FROM ['+@ConfigDb+'].dbo.OperatorPartitions AS OP INNER JOIN ['+@ConfigDb+'].dbo.devicepartitions AS DP on DP.PartitionId= OP.Partitionid WHERE OP.OperatorID = @pOperatorID AND DP.caObjectID= [' + @Table + '].' + @ObjectID + ') ';
          SET @Partitionstr= @Partitionstr + ' OR EXISTS (SELECT 1 FROM ['+@ConfigDb+'].dbo.OperatorPartitions AS OPar INNER JOIN ['+@ConfigDb+'].dbo.devicepartitions AS DPar ON DPar.PartitionId= OPar.Partitionid INNER JOIN ['+@ConfigDb+'].[dbo].[Badge] AS B ON B.PersonID= DPar.caObjectID WHERE OPar.OperatorID = @pOperatorID AND ' + @Table + '.Badge &gt; 0 AND ' + @Table + '.Badge= B.Badge AND ' + @Table + '.Facno= B.Facility) ';

          IF @OperatorID = '1EEB696C-0E28-4702-8598-C379C95B45E1'
          BEGIN
          SET @Partitionstr= @Partitionstr + ' OR NOT EXISTS (SELECT 1 FROM ['+@ConfigDb+'].dbo.devicepartitions AS devPar WHERE devPar.caObjectID = ['+@Table+'].caObjectID)';
          END
          SET @Partitionstr = @Partitionstr + ') '
          END
          ELSE
          BEGIN
          SET @Partitionstr = '';
          END
          SET @sql = ''
          SET @sql = @sql + 'SELECT ' + @Select + CHAR(10)
          SET @sql = @sql + 'FROM ( ' + CHAR(10)
          SET @sql = @sql + 'SELECT ROW_NUMBER() OVER (ORDER BY ' + @OrderBy +') AS rownum1, '  + @Select + CHAR(10)
          SET @sql = @sql + 'FROM [' + @EventDBServer + '].[' + @EventDB + '].[dbo].[' + @Table + ']' + CHAR(10)
          SET @sql = @sql + CHAR(10) + @Partitionstr + CHAR(10) + @vWhere
          SET @sql = @sql + ') AS TAB1' + CHAR(10)
          SET @sql = @sql + 'WHERE rownum1 BETWEEN (@pCurrentPage-1) * @pPageSize+1 AND @pCurrentPage * @pPageSize' + CHAR(10)

          SET @sqlFinal = CHAR(10) + N'SELECT TOP ' + CAST(@PageSize AS VARCHAR) + ' ' + @FinalSelect + CHAR(10)
          SET @sqlFinal = @sqlFinal + N'FROM ( ' + @sql + ') AS TAB2 ORDER BY ' + @FinalOrderBy + CHAR(10)
          EXEC sp_executesql @sqlFinal, N'@pPageSize int, @pCurrentPage int, @pOperatorID UniqueIdentifier', @pPageSize= @PageSize, @pCurrentPage= @CurrentPage, @pOperatorID= @OperatorID;
          END
        </value>
      </setting>
      <setting name="sqlca_sp_VHistChunkResultSetCount" serializeAs="String">
        <value>
          ALTER PROCEDURE [dbo].[ca_sp_VHistChunkResultSetCount](
          @Where varchar(1000) ,
          @Table varchar(3000) ,
          @ObjectID varchar(30) ,
          @OperatorID UniqueIdentifier ,
          @Partitioned bit ,
          @ConfigDb varchar(3000),
          @EventDBServer varchar(3000),
          @EventDB varchar(3000),
          @TotalCount int OUTPUT
          )
          AS
          BEGIN
          SET NOCOUNT ON;
          DECLARE	  @sql nVarChar(4000)
          , @sqlStmt nVarChar(4000)
          , @vWhere nVarChar(1000)
          , @Partitionstr varchar(3000)

          IF @Where &lt;&gt; ''
          BEGIN
          IF @Partitioned = 1
          BEGIN
          SET @vWhere = ' AND ' + @Where;
          END
          ELSE
          BEGIN
          SET @vWhere = ' WHERE ' + @Where;
          END
          END
          ELSE
          BEGIN
          SET @vWhere = '';
          END

          IF @Partitioned = 1
          BEGIN
          SET @Partitionstr=' where (('+@ObjectID+' in (SELECT ['+@ConfigDb+'].dbo.devicepartitions.caObjectID FROM ['+@ConfigDb+'].dbo.OperatorPartitions  inner join  ['+@ConfigDb+'].dbo.devicepartitions   on ['+@ConfigDb+'].dbo.devicepartitions.PartitionId = ['+@ConfigDb+'].dbo.OperatorPartitions.Partitionid where ['+@ConfigDb+'].dbo.OperatorPartitions.OperatorID =@pOperatorID) ) ';
          SET @Partitionstr= @Partitionstr + ' OR EXISTS (SELECT 1 FROM ['+@ConfigDb+'].dbo.OperatorPartitions INNER JOIN ['+@ConfigDb+'].dbo.DevicePartitions ON ['+@ConfigDb+'].dbo.devicepartitions.PartitionId = ['+@ConfigDb+'].dbo.OperatorPartitions.Partitionid INNER JOIN ['+@ConfigDb+'].[dbo].[Badge] AS B ON B.PersonID = ['+@ConfigDb+'].dbo.devicepartitions.caObjectID where ['+@ConfigDb+'].dbo.OperatorPartitions.OperatorID =@pOperatorID AND ' + @Table + '.Badge &gt; 0 AND ' + @Table + '.Badge = B.Badge AND ' + @Table + '.Facno = B.Facility) ';
          SET @Partitionstr= @Partitionstr + ' OR NOT EXISTS (SELECT 1 FROM ['+@ConfigDb+'].dbo.DevicePartitions WHERE ['+@ConfigDb+'].dbo.DevicePartitions.caObjectID = '+@Table+'.caObjectID UNION SELECT 1 FROM ['+@ConfigDb+'].dbo.Operators WHERE IsGlobalAdministrator = 0 AND OperatorID =@pOperatorID)) ';
          END
          ELSE
          BEGIN
          SET @Partitionstr = '';
          END
          IF (LEN(ISNULL(@EventDBServer, '')) &gt; 0 OR LEN(ISNULL(@EventDB, '')) &gt; 0)
          BEGIN
          SET @sql = N'SELECT @TotalCount = COUNT(1) FROM [' + @EventDBServer + '].[' + @EventDB + '].[dbo].' + @Table + @Partitionstr + @vWhere;
          EXEC sp_executesql @sql, N'@TotalCount INT OUTPUT, @pOperatorID UniqueIdentifier',  @TotalCount OUTPUT, @pOperatorID = @OperatorID;
          END
          ELSE
          BEGIN
          SET @TotalCount = 0;
          END
          END
        </value>
      </setting>
    </CardAccess.CustomerService.Properties.Settings>
  </userSettings>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2"/>
  </startup>
</configuration>
